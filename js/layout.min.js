var Layout=function(){var t=function(){$(window).scrollTop()>60?$("body").addClass("page-on-scroll"):$("body").removeClass("page-on-scroll")},o=function(){$(".navbar").offset().top>150&&$(".navbar-fixed-top").addClass("top-nav-collapse"),$(window).scroll(function(){$(".navbar").offset().top>150?$(".navbar-fixed-top").addClass("top-nav-collapse"):$(".navbar-fixed-top").removeClass("top-nav-collapse")});var t=0;t=$(".navbar-fixed-top").height()-20,$(".js_nav-item a").bind("click",function(o){var a=$($(this).attr("href")).offset().top;$("html, body").stop().animate({scrollTop:a-t},600),o.preventDefault()});$("body").scrollspy({target:".navbar-fixed-top",offset:t+2});$(window).scroll(function(){$(".navbar-collapse.in").collapse("hide")})},a=function(){var t=$(".carousel .item"),o=$(window).height();t.eq(0).addClass("active"),t.height(o),t.addClass("full-screen"),$(".carousel img").each(function(){var t=$(this).attr("src"),o=$(this).attr("data-color");$(this).parent().css({"background-image":"url("+t+")","background-color":o}),$(this).remove()}),$(window).on("resize",function(){o=$(window).height(),t.height(o)})},e=function(){$("[data-auto-height]").each(function(){var t=$(this),o=$("[data-height]",t),a=0,e=t.attr("data-mode"),i=parseInt(t.attr("data-offset")?t.attr("data-offset"):0);o.each(function(){"height"==$(this).attr("data-height")?$(this).css("height",""):$(this).css("min-height","");var t="base-height"==e?$(this).outerHeight():$(this).outerHeight(!0);t>a&&(a=t)}),a+=i,o.each(function(){"height"==$(this).attr("data-height")?$(this).css("height",a):$(this).css("min-height",a)}),t.attr("data-related")&&$(t.attr("data-related")).css("height",t.height())})},i=function(){var t=$(".work-popup-overlay"),o=$(".work-popup-close"),a=$(".work-popup-trigger");a.on("click",function(){$(this).find(".work-popup-overlay").removeClass("work-popup-overlay-show"),$(this).find(".work-popup-overlay").addClass("work-popup-overlay-show")}),o.on("click",function(o){o.stopPropagation(),t.removeClass("work-popup-overlay-show")})};return{init:function(){t(),o(),a(),e(),i(),$(window).scroll(function(){t()})},getViewPort:function(){var t=window,o="inner";return"innerWidth"in window||(o="client",t=document.documentElement||document.body),{width:t[o+"Width"],height:t[o+"Height"]}}}}();$(document).ready(function(){Layout.init()});

   
        var quotes = [
        ["You only live once, but if you do it right, once is enough.","Mae West"],
        ["I am so clever that sometimes I don’t understand a single word of what I am saying.","Oscar Wilde"],
        ["Two things are infinite: the universe and human stupidity, and I’m not sure about the universe.","Albert Einstein"],
          ["The most beautiful experience we can have is the mysterious. It is the fundamental emotion that stands at the cradle of true art and true science.","Albert Einstein"]
          ["It is our choices, Harry, that show what we truly are, far more than our abilities.","J.K. Rowling, Harry Potter and the Chamber of Secrets"],
          ["All men who have turned out worth anything have had the chief hand in their own education.","Walter Scott"],
          ["Trust yourself. You know more than you think you do.","Benjamin Spock"],
          ["No one can make you feel inferior without your consent.","Eleanor Roosevelt, This is My Story"],
          ["To be yourself in a world that is constantly trying to make you something else is the greatest accomplishment.","Ralph Waldo Emerson"],
          ["Twenty years from now you will be more disappointed by the things that you didn’t do than by the ones you did do. So throw off the bowlines. Sail away from the safe harbor. Catch the trade winds in your sails. Explore. Dream. Discover.","H. Jackson Brown Jr., P.S. I Love You"],
          ["Dont Let Yesterday Take Up Too Much Of Today.","Will Rogers"],
        ["Live as if you were to die tomorrow. Learn as if you were to live forever.","Mahatma Gandhi"],
        ["That which does not kill us makes us stronger.","Friedrich Nietzsche"],
        ["Be who you are and say what you feel, because those who mind don’t matter and those who matter don’t mind.","Bernard M. Baruch"],
        ["Be yourself, everyone else is already taken.","Oscar Wilde"],
        ["If opportunity doesn’t knock, build a door.","Milton Berle"],
        ["Wise men speak because they have something to say; fools because they have to say something.","Plato"],
        ["Two roads diverged in a wood, and I—I took the one less traveled by, And that has made all the difference.","Robert Frost"]
        ];
      
      var currentQuote = "";
      var currentAuthor = "";
      var randomquote = "";
      
      document.body.onload = function() {getQuote()};
      function getQuote() {
          randomquote = Math.floor(Math.random() * quotes.length);
      
           currentQuote = quotes[randomquote][0];
            currentAuthor = quotes[randomquote][1];
         
                document.getElementById('quoteText').innerText = currentQuote;
                document.getElementById('quotesource').innerText = currentAuthor;
      
                
      }
      
// Counter 
(function ($) {
	$.fn.countTo = function (options) {
		options = options || {};
		
		return $(this).each(function () {
			// set options for current element
			var settings = $.extend({}, $.fn.countTo.defaults, {
				from:            $(this).data('from'),
				to:              $(this).data('to'),
				speed:           $(this).data('speed'),
				refreshInterval: $(this).data('refresh-interval'),
				decimals:        $(this).data('decimals')
			}, options);
			
			// how many times to update the value, and how much to increment the value on each update
			var loops = Math.ceil(settings.speed / settings.refreshInterval),
				increment = (settings.to - settings.from) / loops;
			
			// references & variables that will change with each update
			var self = this,
				$self = $(this),
				loopCount = 0,
				value = settings.from,
				data = $self.data('countTo') || {};
			
			$self.data('countTo', data);
			
			// if an existing interval can be found, clear it first
			if (data.interval) {
				clearInterval(data.interval);
			}
			data.interval = setInterval(updateTimer, settings.refreshInterval);
			
			// initialize the element with the starting value
			render(value);
			
			function updateTimer() {
				value += increment;
				loopCount++;
				
				render(value);
				
				if (typeof(settings.onUpdate) == 'function') {
					settings.onUpdate.call(self, value);
				}
				
				if (loopCount >= loops) {
					// remove the interval
					$self.removeData('countTo');
					clearInterval(data.interval);
					value = settings.to;
					
					if (typeof(settings.onComplete) == 'function') {
						settings.onComplete.call(self, value);
					}
				}
			}
			
			function render(value) {
				var formattedValue = settings.formatter.call(self, value, settings);
				$self.html(formattedValue);
			}
		});
	};
	
	$.fn.countTo.defaults = {
		from: 0,               // the number the element should start at
		to: 0,                 // the number the element should end at
		speed: 1000,           // how long it should take to count between the target numbers
		refreshInterval: 100,  // how often the element should be updated
		decimals: 0,           // the number of decimal places to show
		formatter: formatter,  // handler for formatting the value before rendering
		onUpdate: null,        // callback method for every time the element is updated
		onComplete: null       // callback method for when the element finishes updating
	};
	
	function formatter(value, settings) {
		return value.toFixed(settings.decimals);
	}
}(jQuery));

jQuery(function ($) {
  // custom formatting example
  $('.count-number').data('countToOptions', {
	formatter: function (value, options) {
	  return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
	}
  });
  
  // start all the timers
  $('.timer').each(count);  
  
  function count(options) {
	var $this = $(this);
	options = $.extend({}, options || {}, $this.data('countToOptions') || {});
	$this.countTo(options);
  }
});


      // ============
      //  Type Text
      //===========

      const typedTextSpan = document.querySelector(".typed-text");
      const cursorSpan = document.querySelector(".cursor");
      
      const textArray = ["Developer", "Web Designer", "Programer"]; //add more if you want
      const typingDelay = 200;
      const erasingDelay = 100;
      const newTextDelay = 2000; // Delay between current and next text
      let textArrayIndex = 0;
      let charIndex = 0;
      
      function type() {
        if (charIndex < textArray[textArrayIndex].length) {
          if(!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
          typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
          charIndex++;
          setTimeout(type, typingDelay);
        } 
        else {
          cursorSpan.classList.remove("typing");
          setTimeout(erase, newTextDelay);
        }
      }
      
      function erase() {
        if (charIndex > 0) {
          if(!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
          typedTextSpan.textContent = textArray[textArrayIndex].substring(0, charIndex-1);
          charIndex--;
          setTimeout(erase, erasingDelay);
        } 
        else {
          cursorSpan.classList.remove("typing");
          textArrayIndex++;
          if(textArrayIndex>=textArray.length) textArrayIndex=0;
          setTimeout(type, typingDelay + 1100);
        }
      }
      
      document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if(textArray.length) setTimeout(type, newTextDelay + 250);
      });
